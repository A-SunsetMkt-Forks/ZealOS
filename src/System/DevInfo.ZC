#help_index "Info;Memory/Info"
public U0 MemBIOSRep()
{//Report the memory ranges reported by the BIOS at boot.
	U16 		*m01 = MEM_E801;
	CMemE820	*m20 = MEM_E820;
	CMemRange	*tmpmr;

	if (!IsRaw)
		"$$PURPLE$$Standard Addresses$$FG$$\n";
	else
		"Standard Addresses\n";

	"FEE00000-FEE00FFF See $LK,"APIC",A="MN:LAPIC_BASE"$\n\n";

	if (!IsRaw)
		"$$PURPLE$$Linear Framebuffer$$FG$$\n";
	else
		"Linear Framebuffer\n";

	"%08X-%08X  \n", text.fb_alias, text.fb_alias(U8 *) + text.buffer_size - 1;

	if (!IsRaw)
		"\n$$PURPLE$$32 Bit Device Mem$$FG$$\n";
	else
		"\n32 Bit Device Mem\n";

	while (LBts(&sys_semas[SEMA_DEV_MEM], 0))
		Yield;
	tmpmr = dev.mem32_head.next;
	while (tmpmr != &dev.mem32_head)
	{
		"%z: %08X-%08X\n", tmpmr->type, "Unused\0RAM\0Device", tmpmr->base, tmpmr->base + tmpmr->size - 1;
		tmpmr = tmpmr->next;
	}
	LBtr(&sys_semas[SEMA_DEV_MEM], 0);

	if (!IsRaw)
		"\n$$PURPLE$$BIOS Memory Report 15:E801$$FG$$\n";
	else
		"\nBIOS Memory Report 15:E801\n";

	"0000000000000000-%016X\n", 0x100000 + m01[0] * 1024 - 1;
	"0000000001000000-%016X\n", SYS_16MEG_AREA_LIMIT + m01[1] * 64 * 1024  - 1;

	if (m20->type)
	{
		if (!IsRaw)
			"\n$$PURPLE$$BIOS Memory Report 15:E820$$FG$$\n";
		else
			"\nBIOS Memory Report 15:E820\n";
		while (m20->type)
		{
			if (!IsRaw)
				"$$RED$$";
			switch(m20->type)
			{
				case MEM_E820t_USABLE:
					if (!IsRaw)
						"$$GREEN$$";
					"Usable:      ";
					break;

				case MEM_E820t_ACPI:
				case MEM_E820t_ACPI_NVS:
					"ACPI:        ";
					 break;

				case MEM_E820t_BAD_MEM:
					"Bad memory:  ";
					 break;

				case MEM_E820t_PERM_MEM:
					"Perm memory: ";

				case MEM_E820t_RESERVED:
				default:
					"Reserved:    ";
					break;
			 }
			"%016X-%016X", m20->base, m20->base + m20->len - 1;
			if (!IsRaw)
				"$$FG$$";
			'\n';
			m20++;
		}
	}
	if (!IsRaw)
		"\n$$PURPLE$$BIOS Total Memory Report$$FG$$: ";
	else
		"\nBIOS Total Memory Report: ";

	if (MemBIOSTotal < 1024 * 1024 * 1024)
		"%03d MiB\n", MemBIOSTotal / 1024 / 1024; 		
	else
		"%04d GiB\n", CeilU64(MemBIOSTotal / 1024 / 1024, 1024) / 1024;
}

public U0 MemPageRep()
{//Page Table Report.
	"MAPPED\t  :%010X with ", mem_mapped_space;
	if (!IsRaw)
		"$$RED$$";
	if (Bt(&mem_page_size, 30))
		"1GIG";
	else
		"2MEG";
	if (!IsRaw)
		"$$FG$$";

	" pages\n";

	"PML2\t  :%010X 2MEG  :%08X\n",
				*MEM_PML2(U64 *), *MEM_2MEG_NUM(U64 *);
	"PML3\t  :%010X 1GIG  :%08X\n",
				*MEM_PML3(U64 *), *MEM_1GIG_NUM(U64 *);
	"PML4\t  :%010X 512GIG:%08X\n",
				*MEM_PML4(U64 *), *MEM_512GIG_NUM(U64 *);
	"FIXED_AREA:%010X\n", SYS_FIXED_AREA;
	"HEAP_BASE :%010X\nHEAP_LIMIT:%010X\n", mem_heap_base, mem_heap_limit;
}
